version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: footfit-postgres
    restart: always
    environment:
      POSTGRES_USER: footfit
      POSTGRES_PASSWORD: footfit
      POSTGRES_DB: footfit
      PGDATA: /var/lib/postgresql/data
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    command: postgres -c shared_buffers=512MB -c max_connections=100

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: footfit-redis
    restart: always
    volumes:
      - ./redis/data:/data
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel verbose

  # MinIO Object Storage
  minio:
    image: minio/minio
    container_name: footfit-minio
    restart: always
    volumes:
      - ./minio/data:/data
    environment:
      MINIO_ROOT_USER: footfit
      MINIO_ROOT_PASSWORD: footfit123
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"

  # MinIO Client (MC) for bucket setup
  minio-client:
    image: minio/mc
    container_name: footfit-minio-client
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc config host add myminio http://minio:9000 footfit footfit123;
      /usr/bin/mc mb --ignore-existing myminio/footfit;
      /usr/bin/mc mb --ignore-existing myminio/footfit-profile;
      /usr/bin/mc mb --ignore-existing myminio/footfit-video;
      /usr/bin/mc mb --ignore-existing myminio/footfit-team;
      /usr/bin/mc mb --ignore-existing myminio/footfit-product;
      /usr/bin/mc policy set download myminio/footfit/public;
      /usr/bin/mc policy set download myminio/footfit-profile/public;
      /usr/bin/mc policy set download myminio/footfit-video/public;
      exit 0;
      "

  # Backend API development mode
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: footfit-backend-dev
    restart: always
    depends_on:
      - postgres
      - redis
      - minio
    environment:
      NODE_ENV: development
      PORT: 3000
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: footfit
      DB_PASSWORD: footfit
      DB_NAME: footfit
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: footfit
      MINIO_SECRET_KEY: footfit123
      MINIO_BUCKET: footfit
      JWT_SECRET: development_jwt_secret_key
      JWT_EXPIRE: 86400
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
      - "9229:9229"  # สำหรับ Node.js debugging
    command: npm run dev

  # Video Processing Service development mode
  video-processor-dev:
    build:
      context: ./video-processor
      dockerfile: Dockerfile.dev
    container_name: footfit-video-processor-dev
    restart: always
    depends_on:
      - redis
      - minio
    environment:
      NODE_ENV: development
      PORT: 3001
      HOST: 0.0.0.0
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: footfit
      MINIO_SECRET_KEY: footfit123
      MINIO_VIDEO_BUCKET: footfit-video
      FFMPEG_PATH: /usr/bin/ffmpeg
      FFPROBE_PATH: /usr/bin/ffprobe
      TEMP_DIR: /tmp/videos
    volumes:
      - ./video-processor:/app
      - /app/node_modules
      - ./temp-videos:/tmp/videos
    ports:
      - "3001:3001"
      - "9230:9229"  # สำหรับ Node.js debugging
    command: npm run dev

  # Nginx Proxy for development
  nginx-dev:
    image: nginx:alpine
    container_name: footfit-nginx-dev
    restart: always
    depends_on:
      - backend-dev
      - minio
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/data:/var/www/html
      - ./nginx/logs:/var/log/nginx
    ports:
      - "8080:80"
    command: /bin/sh -c "nginx -g 'daemon off;'"

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  default:
    driver: bridge 